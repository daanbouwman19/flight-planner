name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-windows-msi:
    name: Build Windows MSI
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install WiX Toolset (dotnet global tool)
        shell: powershell
        run: |
          dotnet tool install --global wix --version 6.*
          # Ensure global tools path is available in subsequent steps
          echo "$env:USERPROFILE\.dotnet\tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          wix --version

      - name: Build MSI
        shell: cmd
        run: |
          build_msi.bat

      - name: Compute artifact paths
        id: paths
        shell: bash
        run: |
          echo "msi=dist/FlightPlannerSetup.msi" >> $GITHUB_OUTPUT

      - name: Upload MSI artifact
        uses: actions/upload-artifact@v4
        with:
          name: FlightPlannerSetup-${{ github.ref_name }}-windows
          path: ${{ steps.paths.outputs.msi }}
          if-no-files-found: error

  build-linux:
    name: Build Linux Executable
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        run: cargo build --release

      - name: Package for release
        run: |
          mkdir -p release_package
          cp target/release/flight_planner release_package/
          cp aircrafts.csv release_package/
          cp com.github.daan.flight-planner.desktop release_package/
          cp -r assets release_package/assets
          # Simplified installer and uninstaller for end users
          cp install.sh release_package/install.sh
          cp uninstall.sh release_package/uninstall.sh
          chmod +x release_package/install.sh release_package/uninstall.sh
          tar -czvf flight-planner-linux.tar.gz -C release_package .

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: flight-planner-linux-artifact
          path: flight-planner-linux.tar.gz
          if-no-files-found: error

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-windows-msi, build-linux]
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Flight Planner ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            dist/FlightPlannerSetup.msi
            dist/flight-planner-linux.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
