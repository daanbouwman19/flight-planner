name: Build, Test, and Release

on:
  pull_request:
    branches: ["main"]
  push:
    branches: ["main"]
    tags:
      - "v*"

env:
  CARGO_TERM_COLOR: always

jobs:
  test-and-build:
    name: Test and Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{ matrix.os }}-${{ hashFiles('**/Cargo.lock') }}
          cache-all-crates: true
          cache-targets: true

      - name: Extract version from tag
        if: startsWith(github.ref, 'refs/tags/v')
        shell: bash
        run: |
          echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV

      - name: Cache WiX Toolset
        if: matrix.os == 'windows-latest' && startsWith(github.ref, 'refs/tags/v')
        id: cache-wix
        uses: actions/cache@v4
        with:
          path: ~/.dotnet/tools
          key: ${{ runner.os }}-wix-6.0.2

      - name: Install WiX Toolset (Windows only, on release)
        if: matrix.os == 'windows-latest' && startsWith(github.ref, 'refs/tags/v') && steps.cache-wix.outputs.cache-hit != 'true'
        run: dotnet tool install --global wix --version 6.0.2

      - name: Build (check only for PRs)
        if: github.event_name == 'pull_request'
        run: cargo check --verbose

      - name: Build (release mode for tags)
        if: startsWith(github.ref, 'refs/tags/v')
        run: cargo build --verbose --release

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --verbose

      - name: Package Linux Release
        if: matrix.os == 'ubuntu-latest' && startsWith(github.ref, 'refs/tags/v')
        run: |
          VERSION=${{ env.VERSION }}
          mkdir -p release_package/flight-planner-v${VERSION}/assets/icons
          cp target/release/flight_planner release_package/flight-planner-v${VERSION}/
          cp aircrafts.csv release_package/flight-planner-v${VERSION}/
          cp com.github.daan.flight-planner.desktop release_package/flight-planner-v${VERSION}/
          cp assets/icons/icon-64x64.png release_package/flight-planner-v${VERSION}/assets/icons/
          cp assets/icons/icon-128x128.png release_package/flight-planner-v${VERSION}/assets/icons/
          cp assets/icons/icon-256x256.png release_package/flight-planner-v${VERSION}/assets/icons/
          cp install.sh release_package/flight-planner-v${VERSION}/install.sh
          cp uninstall.sh release_package/flight-planner-v${VERSION}/uninstall.sh
          chmod +x release_package/flight-planner-v${VERSION}/install.sh release_package/flight-planner-v${VERSION}/uninstall.sh
          tar -czvf flight-planner-linux-v${VERSION}.tar.gz -C release_package flight-planner-v${VERSION}

      - name: Build Windows MSI
        if: matrix.os == 'windows-latest' && startsWith(github.ref, 'refs/tags/v')
        shell: cmd
        run: |
          build_msi.bat

      - name: Rename Windows MSI
        if: matrix.os == 'windows-latest' && startsWith(github.ref, 'refs/tags/v')
        run: mv dist/FlightPlannerSetup.msi dist/FlightPlannerSetup-v${{ env.VERSION }}.msi

      - name: Upload Linux Release Artifact
        if: matrix.os == 'ubuntu-latest' && startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: flight-planner-linux-v${{ env.VERSION }}
          path: flight-planner-linux-v${{ env.VERSION }}.tar.gz

      - name: Upload Windows Release Artifact  
        if: matrix.os == 'windows-latest' && startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: flight-planner-windows-v${{ env.VERSION }}
          path: dist/FlightPlannerSetup-v${{ env.VERSION }}.msi

  create-release:
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test-and-build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/flight-planner-windows-v${{ env.VERSION }}/FlightPlannerSetup-v${{ env.VERSION }}.msi
            dist/flight-planner-linux-v${{ env.VERSION }}/flight-planner-linux-v${{ env.VERSION }}.tar.gz
